/* Generated By:JavaCC: Do not edit this line. MdlParser.java */

import java.util.*;

import parser.*;
import parseTables.*;

public class mdl 
{
  public static void main(String args[]) throws ParseException 
    {
	/* 
           'Arraylist a' is a list of all opcodes
           'Stack originsList' is our stack which maintains the list of origins
           'opCode o' is a generic placeholder for a sinle opCode from a
           'Matrix placeholderMatrix' is a generic placeholder for the stack's matrices
           'Matrix origin' is the standard origin (0,0,0) and the first member of the stack
	*/
	ArrayList a;
        Stack originsList = new Stack();
	opCode o = new opCode();
	Matrix placeholderMatrix = new Matrix();
	Matrix origin = new Matrix();

        /* 
           'origin' is an identity matrix. Recall that the identity matrix locates you at (0,0,0).
            It is also the first member of the stack
        */   
	origin.ident();
	originsList.push(origin);

        /*
           The information generated by the code below comes from the parser itself.
        */
	MdlParser parser = new MdlParser(System.in);
	parser.start();
	a = parser.getOps();

        /*
           The main while loop where basically all of our work will be.
        */
	System.out.println("Opcodes:");
	Iterator i = a.iterator();
	while (i.hasNext())
	    {
		o = (opCode)i.next();
		if (o instanceof opPush){
		    // originsList.push();
		}
		else if (o instanceof opPop){
		/* takes the value of originsList.peak (which is like pop
		   except the leading value is only returned not removed.
                   We do this because we want to preserve the list of origins */
		    //  placeholderMatrix = originsList.peak();
		}
		else if (o instanceof opMove){
		}
		else if (o instanceof opLine){
   		}
		else if (o instanceof opTorus){
		}
		else if (o instanceof opBox){
		}
	    }
	System.out.println("\n\n");
	SymTab s = parser.getSymTab();
	Set kset = s.keySet();
	i=kset.iterator();
	System.out.println("Symbol Table:");
	while (i.hasNext())
	    {
		String key = (String)i.next();
		Object value=s.get(key);
		System.out.println(""+key+"="+value);
	    }
  }
}
